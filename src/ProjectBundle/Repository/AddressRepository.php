<?php

namespace ProjectBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Symfony\Component\Validator\Constraints\DateTime;

/**
 * AddressRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AddressRepository extends EntityRepository
{
    const NUM_ITEMS = 100;
    
    /*
    *   Default parameters
    */
    private $page = 1;
    
    /* когдасортировка выполнялась по всем полям
    private $orderby = [];
    */
    private $sortby = null;
    private $sort = 'ASC';
    private $sort_allow = ['country','city','street','home','zipcode','date'];
    
    private $str_parameters = [];
    private $home_min = 0;
    private $home_max = 0;
    private $date_start = null;
    private $date_end = null;
    
    /*
    *   Основной метод при вызове из контроллера, вызывает функцию установки параметров и выполнения запроса к базе
    */
    public function find($request){
        $this->setParamsByRequest($request);

        return $this->findLatest();
    }
    
    /*
    *   Метод строит запрос к базе данных и возвращает его не исполняя
    */    
    private function buildQuery(){
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('a')
            ->from('ProjectBundle:Address', 'a');
        
        if ($this->home_min && $this->home_max){
            $query->andWhere('a.home >= :home_min');
            $query->setParameter('home_min', $this->home_min);
            
            $query->andWhere('a.home <= :home_max');
            $query->setParameter('home_max', $this->home_max);
        }
        
        if ($this->date_start && $this->date_end){
            $query->andWhere('a.createdAt >= :date_start');
            $query->setParameter('date_start', $this->date_start);
            
            $query->andWhere('a.createdAt <= :date_end');
            $query->setParameter('date_end', $this->date_end);
        }

        foreach ($this->str_parameters as $parameter){
            $query->andWhere($parameter[1].' LIKE :'.$parameter[0]);
            $query->setParameter($parameter[0], $parameter[2]);
        }
        
        /* сортировка выполнялась по всем полям
        foreach ($this->orderby as $orderBy)
            $query->addOrderBy($orderBy[0],$orderBy[1]);
        */
        if (null !== $this->sortby)
            $query->addOrderBy($this->sortby,$this->sort);
            
        return $query->getQuery();
    }
    
    /*
    *   Исполняется запрос к базе данных посредством пагинатора, формируется массив полученных записей и их общее количество
    */
    
    public function findLatest()
    {
        $query = $this->buildQuery()->setFirstResult(self::NUM_ITEMS*($this->page-1))->setMaxResults(self::NUM_ITEMS);  //->getResult();
        //  $addresses = $query->getResult();
        $paginator = new Paginator($query, $fetchJoinCollection = true);

        $addresses = [];
        foreach ($paginator as $post) {
            $addresses[] = $post;
        }

        $c = count($paginator);

        return [
            'addresses'     => $addresses,
            'all'           => $c,
            'current_page'  => $this->page
        ];
    }
    
    /*
     *  Метод извлекает параметры из GET запроса и помещает их в private переменные
     */
    
    public function setParamsByRequest($request){
        //  PAGE
        if ((int)($request->query->get('page'))>0){
            $this->page = (int)$request->query->get('page');
        }
        
        //  ORDER BY 
        /*  сортировка выполнялась по всем полям
        if (null !== $request->query->get('country')){
            $this->orderby[] = ['a.country',strtolower($request->query->get('country'))=='desc'?'desc':'asc'];
        }
        if (null !== $request->query->get('city')){
            $this->orderby[] = ['a.city',strtolower($request->query->get('city'))=='desc'?'desc':'asc'];
        }
        if (null !== $request->query->get('street')){
            $this->orderby[] = ['a.street',strtolower($request->query->get('street'))=='desc'?'desc':'asc'];
        }
        if (null !== $request->query->get('home')){
            $this->orderby[] = ['a.home',strtolower($request->query->get('home'))=='desc'?'desc':'asc'];
        }
        if (null !== $request->query->get('zipcode')){
            $this->orderby[] = ['a.zipcode',strtolower($request->query->get('zipcode'))=='desc'?'desc':'asc'];
        }
        if (null !== $request->query->get('date')){
            $this->orderby[] = ['a.createdAt',strtolower($request->query->get('date'))=='desc'?'desc':'asc'];
        }
        */
        //  сортировка будет выполняться только по одному полю
        if (null !== $request->query->get('sortby')){
            $sortby = $request->query->get('sortby');
            //  проверяем доступные поля сортировки
           
            if (in_array($sortby, $this->sort_allow)){
                if ($sortby == 'date')
                    $sortby = 'createdAt';
                    
                $this->sortby = 'a.'.$sortby;
                
                //  направление сортировки
                if (null !== $request->query->get('sort')) {
                    if ($request->query->get('sort') == 'desc')
                        $this->sort = 'DESC';
                }

            }
        }
        
        //  FILTER string
        if (null !== $request->query->get('f_country') && strlen($request->query->get('f_country'))>2){
            $this->str_parameters[] = ['country','a.country','%'.$request->query->get('f_country').'%'];
        }
        if (null !== $request->query->get('f_city') && strlen($request->query->get('f_city'))>2){
            $this->str_parameters[] = ['city','a.city','%'.$request->query->get('f_city').'%'];
        }
        if (null !== $request->query->get('f_street') && strlen($request->query->get('f_street'))>2){
            $this->str_parameters[] = ['street','a.street','%'.$request->query->get('f_street').'%'];
        }
        if (null !== $request->query->get('f_zipcode') && strlen($request->query->get('f_zipcode'))>2){
            $this->str_parameters[] = ['zipcode','a.zipcode','%'.$request->query->get('f_zipcode').'%'];
        }
        
        //  FILTER home int
        if (null !== $request->query->get('f_home_min') && null !== $request->query->get('f_home_max')){
            $this->home_min = (int)$request->query->get('f_home_min');
            $this->home_max = (int)$request->query->get('f_home_max');
        }
        
        //  FILTER date
        if (null !== $request->query->get('f_date')){
            $date = explode(' - ',$request->query->get('f_date'));
            
            $this->date_start =  \DateTime::createFromFormat('d.m.Y H:i', @$date[0]);
            $this->date_end   =  \DateTime::createFromFormat('d.m.Y H:i', @$date[1]);
        }
    }
}
